// Allow this card to appear in the card chooser menu
window.customCards = window.customCards || [];
window.customCards.push({
    type: "lg-remote-control-editor",
    name: "LG Remote Control Card",
    preview: true,
    description: "Remote control card for Lg TV devices"
});
 
// Ceate and register the card editor
class LgRemoteControlEditor extends LitElement {
 
    static get properties() {
        return {
            hass: {},
            _config: {},
        };
    }
 
    // setConfig works the same way as for the card itself
    setConfig(config) {
        this._config = config;
    }
 
    // This function is called when the input element of the editor loses focus or is changed
    configChanged(ev) {
 
        const _config = Object.assign({}, this._config);
        _config[ev.target.name.toString()] = ev.target.value;
        this._config = _config;
 
        // A config-changed event will tell lovelace we have made changed to the configuration
        // this make sure the changes are saved correctly later and will update the preview
        const event = new CustomEvent("config-changed", {
            detail: { config: _config },
            bubbles: true,
            composed: true,
        });
        this.dispatchEvent(event);
    }
 
    configChangedBool(ev) {
        const inputName = ev.target.name;
        const newValue = ev.target.value === 'true';
 
        const _config = Object.assign({}, this._config);
        _config[inputName] = newValue;
        this._config = _config;
 
        // Invia l'evento "config-changed"
        const event = new CustomEvent('config-changed', {
          detail: { config: _config },
          bubbles: true,
          composed: true,
        });
        this.dispatchEvent(event);
      }
 
    colorsConfigChanged(ev) {
        // Controlla se l'evento Ã¨ scatenato da un'icona
        if (ev.target.tagName === "HA-ICON") {
          const inputName = ev.target.getAttribute("data-input-name");
          if (inputName) {
            const inputElement = this.shadowRoot.querySelector(`[name="${inputName}"]`);
            if (inputElement) {
              // Imposta l'input su una stringa vuota
              inputElement.value = "";
 
              // Aggiorna la configurazione
              const _config = Object.assign({}, this._config);
              _config["colors"] = { ...(_config["colors"] ?? {}) };
              _config["colors"][inputName] = "";
              this._config = _config;
 
              // Invia l'evento "config-changed"
              const event = new CustomEvent("config-changed", {
                detail: { config: _config },
                bubbles: true,
                composed: true,
              });
              this.dispatchEvent(event);
            }
          }
        } else {
          // Se l'evento non proviene da un'icona, gestisci la modifica dell'input come al solito
          const _config = Object.assign({}, this._config);
          _config["colors"] = { ...(_config["colors"] ?? {}) };
          _config["colors"][ev.target.name.toString()] = ev.target.value;
          this._config = _config;
 
          // Invia l'evento "config-changed"
          const event = new CustomEvent("config-changed", {
            detail: { config: _config },
            bubbles: true,
            composed: true,
          });
          this.dispatchEvent(event);
        }
      }
 
      dimensionsConfigChanged(ev) {
        // Se l'evento non proviene da un'icona, gestisci la modifica dell'input come al solito
        const _config = Object.assign({}, this._config);
        _config["dimensions"] = { ...(_config["dimensions"] ?? {}) };
 
        if (ev.target.name === 'border_width') {
          _config["dimensions"][ev.target.name] = ev.target.value + 'px';
        } else {
          _config["dimensions"][ev.target.name] = ev.target.value;
        }
 
        this._config = _config;
 
        // Invia l'evento "config-changed"
        const event = new CustomEvent("config-changed", {
          detail: { config: _config },
          bubbles: true,
          composed: true,
        });
        this.dispatchEvent(event);
      }
    getLgTvEntityDropdown(optionValue){
        var mediaPlayerEntities = this.getMediaPlayerEntitiesByPlatform('webostv');
        var heading = 'lg Media Player Entity';
        this.getMediaPlayerEntitiesByPlatform('webostv');
        var blankEntity = '';
        if(this._config.tventity == '' || !(mediaPlayerEntities).includes(optionValue)) {
            blankEntity = html `<option value="" selected> - - - - </option> `;
        }
        return html`
            ${heading}:<br>
            <select name="entity" id="entity" class="select-item" .value="${optionValue}"
                    @focusout=${this.configChanged}
                    @change=${this.configChanged} >
                ${blankEntity}
                ${mediaPlayerEntities.map((eid) => {
                    if (eid != this._config.tventity) {
                        return html`<option value="${eid}">${this.hass.states[eid].attributes.friendly_name || eid}</option> `;
                    }
                    else {
                        return html`<option value="${eid}" selected>${this.hass.states[eid].attributes.friendly_name || eid}</option> `;
                    }
                })}
            </select>
            <br>
            <br>`
    }
 
    getMediaPlayerEntitiesByPlatform(platformName) {
        var entities = Object.keys(this.hass.entities).filter(
            (eid) => this.hass.entities[eid].platform === platformName
        );
        const re = /media_player/;
        return entities.filter(a => re.exec(a));
    }
 
    selectMac(macValue) {
        // Imposta un valore di esempio predefinito
 
        macValue = macValue ?? '00:11:22:33:44:55';
 
        var heading = 'MAC Address:';
        return html`
            ${heading}<br>
            <input type="text" name="mac" id="mac" style="background-color:var(--label-badge-text-color);width: 37.8ch;padding: .6em; font-size: 1em;" .value="${macValue}"
                   @focusout=${this.configChanged}
                   @change=${this.configChanged}>
            <br><br>
        `;
    }
 
    selectColors(config) {
        var heading = 'Colors Configuration';
 
        if (!config || !config.colors) {
            config = { colors: { buttons: '', text: '', background: '', border: '' } };
        }
 
        return html`
            <div class="heading">${heading}:</div>
            <div class="color-selector" class="title">
                <label class="color-item" for="buttons" >Buttons Color:</label>
                <input type="color" name="buttons" id="buttons"  .value="${config.colors && config.colors.buttons || ''}"
                       @change=${this.colorsConfigChanged}></input>
                <ha-icon data-input-name="buttons" icon="mdi:trash-can-outline" @click=${this.colorsConfigChanged}></ha-icon>
 
 
                <label class="color-item" for="text">Text Color:</label>
                <input type="color" name="text" id="text"  .value="${config.colors && config.colors.text || ''}"
                       @change=${this.colorsConfigChanged}></input>
                       <ha-icon data-input-name="text" icon="mdi:trash-can-outline" @click=${this.colorsConfigChanged}></ha-icon>
 
                <label class="color-item" for="background">Background Color:</label>
                <input type="color" name="background" id="background"  .value="${config.colors && config.colors.background || ''}"
                       @change=${this.colorsConfigChanged}></input>
                       <ha-icon data-input-name="background" icon="mdi:trash-can-outline" @click=${this.colorsConfigChanged}></ha-icon>
 
                <label class="color-item" for="border">border Color:</label>
                <input type="color" name="border" id="border"  .value="${config.colors && config.colors.border || ''}"
                        @change=${this.colorsConfigChanged}></input>
                        <ha-icon data-input-name="border" icon="mdi:trash-can-outline" @click=${this.colorsConfigChanged}></ha-icon>
            </div>
        `;
    }
 
    ColorButtonsConfig(optionvalue) {
        var heading = 'Do you want to configure an AV-Receiver';
 
        // Controlla se esiste una configurazione "color_buttons" e usa quel valore come opzione selezionata
        const selectedValue = this._config.color_buttons || 'false';
 
        return html`
          <div>color buttons config</div>
          <select name="color_buttons" id="color_buttons" class="select-item"
                  .value="${selectedValue}"
                  @change=${this.configChangedBool}
          >
            <option value="true" ?selected=${selectedValue === 'true'}>True</option>
            <option value="false" ?selected=${selectedValue === 'false'}>False</option>
          </select>
          <br>
        `;
      }
 
      setDimensions(config) {
        var heading = 'set dimensions';
 
        const borderWidth = parseFloat(config.dimensions.border_width);
 
        return html`
          <div class="heading">${heading}:</div>
          <br>
          <label for="scale">Card Scale: ${config.dimensions.scale}</label><br>
          <input type="range" min="0.5" max="1.5" step="0.01" .value="${config.dimensions && config.dimensions.scale}" id="scale" name="scale" @change=${this.dimensionsConfigChanged} style="width: 40ch;">
          </input>
          <br>
          <br>
          <label for="border_width">Card border width: ${borderWidth}px</label><br>
          <input type="range" min="1" max="5" step="1" .value="${borderWidth}" id="border_width" name="border_width" @change=${this.dimensionsConfigChanged} style="width: 40ch;">
          </input>
          <br>
          </div>
        `;
      }
 
    getDeviceAVReceiverDropdown(optionvalue) {
        const familykeys = [...AvReceiverdevicemap.keys()];
 
        return html`
            <div>AV-Receiver config option:</div>
            <select 
                name="av_receiver_family"
                id="av_receiver_family"
                class="select-item"
                .value=${optionvalue}
                @focusout=${this.configChanged}
                @change=${this.configChanged}
            >
                ${familykeys.map((family) => {
                    const receiverData = AvReceiverdevicemap.get(family);
 
                    return html`
                        <option value="${family}" ?selected=${optionvalue === family}>${receiverData.friendlyName}</option>
                    `;
 
                })}
            </select>
            <br />
        `;
    }
 
    getMediaPlayerEntityDropdown(optionValue) {
        if (this._config.av_receiver_family) {
            const mediaPlayerEntities = this.getMediaPlayerEntitiesByPlatform(optionValue);
            const blankEntity = (this._config.ampli_entity === '' || !mediaPlayerEntities.includes(optionValue))
                ? html`<option value="" selected> - - - - </option>`
                : '';
            return html`
                A-Receiver config (option):}<br>
                <select name="ampli_entity" id="ampli_entity" class="select-item" .value="${optionValue}"
                        @focusout=${this.configChanged}
                        @change=${this.configChanged}>
                    ${blankEntity}
                    ${mediaPlayerEntities.map((eid) => html`
                        <option value="${eid}" ?selected=${eid === this._config.ampli_entity}>
                            ${this.hass.states[eid].attributes.friendly_name || eid}
                        </option>
                    `)}
                </select>
                <br><br>
            `;
        } else {
            return html``; // Gestire il caso in cui `deviceFamily` non corrisponda a nessuna piattaforma
        }
    }
 
 
 
    render() {
        if (!this.hass || !this._config) {
            return html``;
        }
 
        if(!this._config.av_receiver_family) {
            this._config.av_receiver_family = AvReceiverdevicemap.keys().next().value;
        }
 
 
 
 
 
 
        return html`
 
            ${this.getLgTvEntityDropdown(this._config.entity)}
            ${this.selectMac(this._config.mac)}
            ${this.selectColors(this._config)}
            ${this.ColorButtonsConfig(this._config)}
            ${this.getDeviceAVReceiverDropdown(this._config.av_receiver_family)}
            ${this.getMediaPlayerEntityDropdown(this._config.av_receiver_family)}
            ${this.setDimensions(this._config)}
            <br>
            channels and custom sources must be configured manually
 
 
 
 
 
        `;
    }
 
    static get styles() {
        return css`
 
        .color-selector {
            display: grid;
            grid-template-columns: auto 8ch 3ch;
            width: 40ch;
        }
 
        .color-item {
            padding: .6em;
            font-size: 1em;
        }
 
        .heading {
            font-weight: bold;
        }
 
        .select-item {
            background-color: var(--label-badge-text-color);
            width: 40ch;
            padding: .6em; 
            font-size: 1em;
        }
 
        `;
    }
 
 
 
}
 
customElements.define("lg-remote-control-editor", LgRemoteControlEditor);
